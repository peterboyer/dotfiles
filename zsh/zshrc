export UNAME="$(uname)"
if [[ $UNAME != "Linux" && $UNAME != "Darwin" ]]; then
  echo "panic: unknown UNAME system information"
  exit 1
fi

# =====

if [[ $UNAME == "Linux" ]]; then
  export ZSH=/usr/share/oh-my-zsh
elif [[ $UNAME == "Darwin" ]]; then
  export ZSH="$HOME/.oh-my-zsh"
fi

# https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="eastwood"

# CASE_SENSITIVE="true"
# HYPHEN_INSENSITIVE="true"
COMPLETION_WAITING_DOTS="true"
# ENABLE_CORRECTION="true"
DISABLE_UNTRACKED_FILES_DIRTY="true"

if [[ $UNAME == "Linux" ]]; then
  # DISABLE_AUTO_UPDATE="true"
  # DISABLE_UPDATE_PROMPT="true"
  export UPDATE_ZSH_DAYS=10
elif [[ $UNAME == "Darwin" ]]; then
  zstyle ':omz:update' mode reminder # ... | disabled | auto
  zstyle ':omz:update' frequency 10
fi

plugins=(git)

if [[ $UNAME == "Linux" ]]; then
  ZSH_CACHE_DIR=$HOME/.cache/oh-my-zsh
  if [[ ! -d $ZSH_CACHE_DIR ]]; then
    mkdir $ZSH_CACHE_DIR
  fi
fi

source $ZSH/oh-my-zsh.sh

# =====

export EDITOR=nvim

alias vim="nvim"
alias todo="vim ~/_todo.txt"

# =====

alias ls="exa"
alias l="ls -l"
alias la="ls -la"

alias cdx="cd ~/_dev"
alias cdz="cd ~/_zone"
alias cdd="cd ~/_dotfiles"

alias srczsh="source ~/.zshrc"
alias cfgzsh="(cd ~ && vim .zshrc)"
alias cfggit="(cd ~ && vim .gitconfig)"
alias cfgvim="(cd ~/.config/nvim && vim init.lua)"

# =====

if [[ $UNAME == "Linux" ]]; then
  # https://aur.archlinux.org/packages/nvm#comment-764001
  source /usr/share/nvm/init-nvm.sh

# auto-nvm-switching
# https://www.richardhuf.com.au/using-node-version-manager-and-nvmrc-to-automatically-switch-node-versions-per-project/
autoload -U add-zsh-hook
load-nvmrc() {
  if [[ -f .nvmrc && -r .nvmrc ]]; then
    nvm use
  fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc

elif [[ $UNAME == "Darwin" ]]; then
  export NVM_DIR="$HOME/.nvm"
  [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
  # [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
fi

# =====

# docker-destroy-containers
function ddc() {
  docker ps -a | grep "$1" | awk '{print $1}' | xargs docker rm -f
}

# docker-destroy-untagged-images
function ddui() {
  docker image ls | grep '<none>' | awk '{print $3}' | xargs docker rmi -f
}

# =====

function deport() {
  TARGET_PORT=$1
  TARGET_PID="$(lsof -i:$TARGET_PORT -t)"
  if [[ -z "$TARGET_PID" ]]; then
    echo "no process on port $TARGET_PORT"
  else
    echo $TARGET_PID | xargs kill
    echo $TARGET_PID | xargs echo
  fi
}

# =====

alias dslr-mount="sudo modprobe v4l2loopback exclusive_caps=1 max_buffers=2"
alias dslr-unmount="sudo rmmod v4l2loopback"

alias dslr-ls="ls /dev/video*"
alias dslr-gls="gphoto2 --abilities"

function dslr_stream() {
  # use first arg
  TARGET="$1"
  # if first arg empty, default to last device
  if [[ -z "$1" ]]; then
    TARGET=$(ls -1 /dev/video* | awk 'BEGIN{ RS = "" ; FS = "\n" }{print $NF}')
    echo $TARGET
  fi
  # gphoto output | stream to encoder | stream to device
  gphoto2 --stdout --capture-movie | ffmpeg -i - -vcodec rawvideo -pix_fmt yuv420p -threads 0 -f v4l2 $TARGET
}
alias dslr-stream="dslr_stream"
