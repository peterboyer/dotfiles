#!/usr/bin/env bash

# Sandbox all project-related commands within a Docker container.
# - Isolates your machine from supply-chain attacks.
#   - All lifecycle scripts run inside container.
#   - All node/runtime code runs inside container.
#   - Only expose port if PORT is specified.
#
# Usage: nodebox [npm|yarn|...] [args...]
#
# Example:
#   alias yarn="nodebox yarn"
#   yarn install
#   PORT=3000 yarn dev
#
# Example:
#   # Enter the container without running a script.
#   yarn shell
#
# Config:
# - Add a .nodeboxrc file with the Docker image name you would like to use.
# // .nodeboxrc
# node:20
#
# - Add ports you wish to expose as newline delimited PORT=XXXX instructions.
#
# // .nodeboxrc
# node:20
# PORT=3000
# PORT=5000
#
# - Add optional matcher to only expose port if string is found in args.
# // .nodeboxrc
# node:20
# PORT=3000 web
# PORT=5000 api

cmdtarget="${1:?required}"

image="node:20"
imagerc=".nodeboxrc"

# https://unix.stackexchange.com/a/22215
imagedir=$(pwd)
while [[ "$imagedir" != "" && ! -e "$imagedir/$imagerc" ]]; do
	imagedir=${imagedir%/*}
done

if [[ -n "$imagedir" ]]; then
	image="$(cat $imagedir/$imagerc | head -n 1)"
	portdefs=$(cat $imagedir/$imagerc | grep PORT=)
fi

user="$(id --user)"

cmd="/usr/local/bin/$cmdtarget ${@:2}"
if [[ "$2" == "shell" ]]; then
	cmd="exec sh"
fi

args=(
	"--rm"
	"--tty"
	"--interactive"
	"--volume" "$PWD:/mnt"
	"--workdir" "/mnt"
	"--init"
	"--user" "$user:$user"
)

IFS=$'\n' portdefs=(${portdefs})
for portdef in ${portdefs[@]}
do
	port="$(echo $portdef | awk '{print$1}' | sed 's/PORT=//')"
	if [[ "$portdef" =~ " " ]]; then
		matcher="$(cut -d ' ' -f2- <<< $portdef)"
		if [[ "${@}" =~ "$matcher" ]]; then
			args+=("--publish" "$port:$port")
			report="$report[$port]"
		fi
	else
		args+=("--publish" "$port:$port")
		report="$report[$port]"
	fi
done

echo "nodebox($image)$report"

if [[ -n "$DEBUG" ]]; then
	debug="echo"
fi

$debug docker run ${args[@]} $image /bin/sh -c "sh -c \"$cmd\""
