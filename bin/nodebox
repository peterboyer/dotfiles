#!/usr/bin/env bash

# Sandbox all project-related commands within a Docker container.
# - Isolates your machine from supply-chain attacks.
#   - All lifecycle scripts run inside container.
#   - All node/runtime code runs inside container.
#   - Only expose port if PORT is specified.
#
# Usage: nodebox [npm|yarn|...] [args...]
#
# Example:
#   alias yarn="nodebox yarn"
#   yarn install
#   PORT=3000 yarn dev
#
# Example:
#   # Enter the container without running a script.
#   yarn shell
#
# Config:
# - Add a .nodeboxrc file with the Docker image name you would like to use.
# // .nodeboxrc
# node:22
#
# - Add ports you wish to expose as newline delimited PORT=XXXX instructions.
#
# // .nodeboxrc
# node:22
# PORT=3000
# PORT=5000
#
# - Add optional matcher to only expose port if string is found in args.
# // .nodeboxrc
# node:22
# PORT=3000 web
# PORT=5000 api

if [[ "$UNSAFE" == '1' ]]; then
	${@}
	exit
fi

cmdtarget="${1:?required}"

image="${IMAGE:-nodebox}"
imagerc=".nodeboxrc"

# find nearest nodeboxrc in parent folders
# https://unix.stackexchange.com/a/22215
imagedir=$(pwd)
while [[ "$imagedir" != "" && ! -e "$imagedir/$imagerc" ]]; do
	imagedir=${imagedir%/*}
done

if [[ -n "$imagedir" ]]; then
	imagedef="$(cat $imagedir/$imagerc | head -n 1)"
	if [[ -n $imagedef && ! $imagedef =~ '=' ]]; then
		image=$imagedef
	fi
	portdefs=$(cat $imagedir/$imagerc | grep PORT=)
fi

# build nodebox image as needed
if [[ $image == "nodebox" && -z "$(docker images | grep nodebox)" ]]; then
	dockerfile=$(mktemp)
	cat <<- EOF > $dockerfile
		FROM node:22-alpine
		RUN npm -g install pnpm@10
		USER node
		RUN pnpm config set store-dir /.pnpm-store
	EOF
	docker build --file $dockerfile --tag nodebox .
	rm $dockerfile
fi

user="$(id --user)"

cmd="/usr/local/bin/$cmdtarget ${@:2}"
if [[ $1 == "shell" ]]; then
	cmd="exec sh"
fi

name=$(basename $PWD)

mkdir -p ~/.npm
mkdir -p ~/.local/share/pnpm/store

args=(
	"--rm"
	"--tty"
	"--interactive"
	"--workdir" "/.mnt/$name"
	"--volume" "$PWD:/.mnt/$name"
	"--volume" "$HOME/.npm:/home/node/.npm"
	"--volume" "$HOME/.local/share/pnpm/store:/.pnpm-store"
	"--init"
	"--user" "$user"
)

if [[ -n "$PORT" ]]; then
	port=$PORT
	args+=("--publish" "$port:$port")
	report="$report[$port]"
fi

IFS=$'\n' portdefs=(${portdefs})
for portdef in ${portdefs[@]}
do
	port="$(echo $portdef | awk '{print$1}' | sed 's/PORT=//')"
	if [[ "$portdef" =~ " " ]]; then
		matcher="$(cut -d ' ' -f2- <<< $portdef)"
		if [[ "${@}" =~ "$matcher" ]]; then
			args+=("--publish" "$port:$port")
			report="$report[$port]"
		fi
	else
		args+=("--publish" "$port:$port")
		report="$report[$port]"
	fi
done

echo "nodebox($image)$report"

if [[ -n "$DEBUG" ]]; then
	debug="echo"
fi

if [[ -n "$LOCAL" ]]; then
	args+=("--network" "host")
fi

$debug docker run ${args[@]} $image /bin/sh -c "sh -c \"$cmd\""
