#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

target_dir=${1:-}

if [[ -z "$target_dir" ]]; then
	cat << EOM
Use rsync to backup the current directory to the given target directory.

Usage:
	backup <target_dir> [options]

Options:
	--yes        Confirm and execute the backup, otherwise does a dry-run.
	--restore    Skips check for source directory to not be "~/_".
	--debug      Echos out rsync command and args instead of executing.

Example:
	backup /run/media/[user]/flash-drive

	[output]*****************    [prefix]************
	.d...p..... todo/            . nothing to do
	>f...p..... todo/todo.txt    > copy to target
	*deleting   foo              * delete from target
EOM
	exit
elif [[ ! -e $target_dir ]]; then
	echo "error: \"$target_dir\" does not exist"
	exit 1
elif [[ ! -d $target_dir ]]; then
	echo "error: \"$target_dir\" is not a directory"
	exit 1
elif [[ ! -w $target_dir ]]; then
	echo "error: \"$target_dir\" is not writable"
	exit 1
fi

source_dir="$PWD"
source_dir_default="$HOME/_"

if [[ $source_dir != $source_dir_default && ! ${@} =~ "--restore" ]]; then
	echo "error: current directory is not default source: \"$source_dir_default\""
	echo "       1. cd to \"$source_dir_default\" to continue,"
	echo "       2. or, use --restore to bypass with current directory as source."
	exit 2
fi

rsync_args=(
	"rsync"
	"$source_dir/."
	"$target_dir"

	"-vv"               # very-verbose
	"--itemize-changes" # output a change-summary for all updates

	# ! DANGER
	"--delete-after"    # receiver deletes after transfer, not during

	# metadata
	"--archive"         # -rlptgoD
		# -r --recursive  # recurse into directories
		# -l --links      # copy symlinks as symlinks
		# -p --perms      # preserve permissions
		# -t --times      # preserve modification times
		# -g --group      # preserve group
		# -o --owner      # preserve owner
		# -D              # --devices --specials
			# --devices     # preserve device files
			# --specials    # preserve special files
	"--executability"   # preserve executability
	"--no-devices"      # don't: preserve device files
	"--no-specials"     # don't: preserve device files
	"--numeric-ids"     # don't map uid/gid values by user/group name
	"--one-file-system" # don't cross filesystem boundaries

	# exclude .nosync dirs/files
	"--exclude=*.nosync"

	# exclude fs/files
	"--exclude=lost+found"
	"--exclude=/.Trashes"
	"--exclude=/.Trash-1000"

	# exclude macOS clutter
	"--exclude=.DS_Store"
	"--exclude=._*"
	"--exclude=/.Spotlight-V100"
	"--exclude=/.DocumentRevisions-V100"
	"--exclude=/.fseventsd"
	"--exclude=/.TemporaryItems"
	"--exclude=/.HFS+ Private Directory Data"
	"--exclude=/.com.apple.timemachine.supported"
	"--exclude=/.com.apple.timemachine.donotpresent"
	"--exclude=/.journal"
	"--exclude=/.journal_info_block"

	# exclude development leftovers
	"--exclude=dist"
	"--exclude=build"
	"--exclude=node_modules"
	"--exclude=.nx"
	"--exclude=.next"
	"--exclude=Pods"
	"--exclude=venv"
	"--exclude=*.pyc"
	"--exclude=__pycache__"
)

if [[ ! ${@} =~ "--yes" ]]; then
	rsync_args+=("--dry-run")
fi

if [[ ${@} =~ "--debug" ]]; then
	echo ${rsync_args[@]}
else
	${rsync_args[@]} | grep --color -E '^[>*]'
fi
